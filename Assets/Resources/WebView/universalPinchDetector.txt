(function () {
    class UniversalGestureDetector {
        constructor() {
            this.pinchValueProvider = null;
            this.initialPinchDistance = 0;
            this.isPinching = false;
            this.preventDefaultTouchEvents = false;  // 控制是否阻止默认触摸事件
            this.currentScale = 1.0;  // 添加新属性来跟踪当前缩放值
            this.lastTouches = null;  // 添加新属性来存储最后的触摸点

            // 绑定方法
            this.handleTouchStart = this.handleTouchStart.bind(this);
            this.handleTouchMove = this.handleTouchMove.bind(this);
            this.handleTouchEnd = this.handleTouchEnd.bind(this);

            // 添加事件监听，使用 passive: false 允许我们阻止默认行为
            document.addEventListener('touchstart', this.handleTouchStart, { passive: false });
            document.addEventListener('touchmove', this.handleTouchMove, { passive: false });
            document.addEventListener('touchend', this.handleTouchEnd, { passive: false });

            // 阻止缩放
            document.addEventListener('gesturestart', this.preventDefault);
            document.addEventListener('gesturechange', this.preventDefault);
            document.addEventListener('gestureend', this.preventDefault);

            console.log('UniversalGestureDetector initialized with event prevention');

            // 尝试自动查找页面中的getValue函数
            this.autoDetectValueProvider();
        }

        autoDetectValueProvider() {
            // 查找页面级的getValue函数
            if (window.getValue) {
                this.pinchValueProvider = window.getValue;
                console.log('Found global getValue function');
                return;
            }

            // 如果没找到，设置一个定时器继续尝试
            setTimeout(() => this.autoDetectValueProvider(), 100);
        }

        preventDefault(e) {
            e.preventDefault();
        }

        getTouchDistance(touch1, touch2) {
            const dx = touch1.clientX - touch2.clientX;
            const dy = touch1.clientY - touch2.clientY;
            return Math.sqrt(dx * dx + dy * dy);
        }

        getCustomValue() {
            return this.pinchValueProvider?.() || "";
        }

        createPinchMessage(type, touches = null, scale = null) {
            const message = {
                type: type,
                url: window.location.href,
                value: this.getCustomValue()
            };

            if (touches) {
                message.touch1 = { x: touches[0].clientX, y: touches[0].clientY };
                message.touch2 = { x: touches[1].clientX, y: touches[1].clientY };
            }

            if (scale !== null) {
                message.scale = scale;
            }

            return JSON.stringify(message);
        }

        handleTouchStart(event) {
            if (event.touches.length === 2) {
                // 阻止默认行为和事件冒泡
                event.preventDefault();
                event.stopPropagation();
                
                this.isPinching = true;
                this.preventDefaultTouchEvents = true;
                this.initialPinchDistance = this.getTouchDistance(event.touches[0], event.touches[1]);
                
                this.currentScale = 1.0;
                window.vuplex?.postMessage(
                    this.createPinchMessage('PinchStart', [event.touches[0], event.touches[1]], this.currentScale)
                );

                // 添加临时的样式来禁用页面滚动
                document.body.style.overflow = 'hidden';
                document.body.style.touchAction = 'none';
            }
        }

        handleTouchMove(event) {
            if (this.preventDefaultTouchEvents) {
                event.preventDefault();
                event.stopPropagation();
            }

            if (this.isPinching && event.touches.length === 2) {
                const currentDistance = this.getTouchDistance(event.touches[0], event.touches[1]);
                this.currentScale = currentDistance / this.initialPinchDistance;
                // 存储最后的触摸点
                this.lastTouches = [
                    { clientX: event.touches[0].clientX, clientY: event.touches[0].clientY },
                    { clientX: event.touches[1].clientX, clientY: event.touches[1].clientY }
                ];
                
                window.vuplex?.postMessage(
                    this.createPinchMessage('PinchUpdate', [event.touches[0], event.touches[1]], this.currentScale)
                );
            }
        }

        handleTouchEnd(event) {
            if (this.isPinching) {
                event.preventDefault();
                event.stopPropagation();
                
                this.isPinching = false;
                this.preventDefaultTouchEvents = false;

                // 使用存储的最后触摸点
                window.vuplex?.postMessage(
                    this.createPinchMessage('PinchEnd', this.lastTouches, this.currentScale)
                );

                // 恢复页面滚动
                document.body.style.overflow = '';
                document.body.style.touchAction = '';
                this.lastTouches = null;  // 清理存储的触摸点
            }
        }

        // 清理方法
        destroy() {
            document.removeEventListener('touchstart', this.handleTouchStart);
            document.removeEventListener('touchmove', this.handleTouchMove);
            document.removeEventListener('touchend', this.handleTouchEnd);
            document.removeEventListener('gesturestart', this.preventDefault);
            document.removeEventListener('gesturechange', this.preventDefault);
            document.removeEventListener('gestureend', this.preventDefault);
        }
    }

    // 清理旧的实例（如果存在）
    if (window._vuplexGestureDetector) {
        window._vuplexGestureDetector.destroy();
    }

    // 创建新实例并暴露给全局
    const detector = new UniversalGestureDetector();
    window._vuplexGestureDetector = detector;
    window.gestureDetector = detector;
})();